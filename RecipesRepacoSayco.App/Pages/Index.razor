@using RecipesRepacoSayco.App.Models
@using RecipesRepacoSayco.App.Shared.Components;
@page "/"
@inject IBatchProcessRepository _repo


<PageTitle>Index</PageTitle>

<MudContainer Fixed="false" Class="mt-4 px-2">
    <FilterComponent @ref="FilterComponent" OnFilterChanged="ApplyFilter" IsLoading="@IsLoading" />
</MudContainer>


<MudContainer Fixed="false" Class="mt-4 px-2">
    <RecipesRepacoSayco.App.Shared.Components.ReportGrid.ReportGridComponent IsLoading="IsLoading"
        FilteredBatches="FilteredBatches" Filter="FilterComponent.Filter" />
</MudContainer>

@code {

    private FilterComponent FilterComponent { get; set; }
    public bool IsLoading { get; set; } = false;

    IEnumerable<BatchProcess> FilteredBatches { get; set; }

    private async Task ApplyFilter(BatchFilterModel filter)
    {
        IsLoading = true;

        try
        {
            var results = await _repo.GetByDateAndTextAsync(
            filter.StartDate ?? DateTime.MinValue,
            filter.EndDate ?? DateTime.MaxValue,
            filter.SearchText
            );

            FilteredBatches = results;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering: {ex.Message}");

        }
        finally
        {
            StateHasChanged();
        }

        IsLoading = false;
    }


    private void SetLoadingState(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged(); // Notify the component to re-render
    }



}